name: Helm Deployment

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "helm/**"
      - ".github/workflows/helm-deploy.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: echo "version=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Build and push User Service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfiles/Dockerfile.user
          push: true
          tags: kamran420/ecommerce-user:${{ steps.meta.outputs.version }},kamran420/ecommerce-user:latest

      - name: Build and push Product Service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfiles/Dockerfile.product
          push: true
          tags: kamran420/ecommerce-product:${{ steps.meta.outputs.version }},kamran420/ecommerce-product:latest

      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfiles/Dockerfile.front
          push: true
          tags: kamran420/ecommerce-front:${{ steps.meta.outputs.version }},kamran420/ecommerce-front:latest

  deploy-helm:
    needs: build-and-publish
    runs-on: ubuntu-latest
    env:
      RELEASE_NAME: ecommerce-test
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
      ZONE: us-central1-a
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate with GCP
        run: |
          echo "${{ secrets.GCP_SA_KEY64 }}" | base64 -d > gcp-key.json
         
          if ! jq empty gcp-key.json > /dev/null 2>&1; then
            echo "Invalid JSON in GCP_SA_KEY secret"
            exit 1
          fi
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: Create ephemeral cluster
        run: |
          CLUSTER_NAME=ephemeral-${{ github.run_id }}
          echo "Creating ephemeral cluster: $CLUSTER_NAME"
          gcloud container clusters create $CLUSTER_NAME --zone $ZONE --num-nodes=1 --quiet
          gcloud container clusters get-credentials $CLUSTER_NAME --zone $ZONE
          echo $CLUSTER_NAME > cluster_name.txt

      
      - name: Install gke-gcloud-auth-plugin
        run: |
         echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
         sudo apt-get install -y apt-transport-https ca-certificates gnupg
         curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
         sudo apt-get update
         sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin
        

      - name: Create namespace if it doesn't exist
        run: kubectl create namespace ${{ env.RELEASE_NAME }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create DB secrets and config maps
        run: |
          # Delete any old objects
          kubectl delete secret db-secret --namespace=${{ env.RELEASE_NAME }} --ignore-not-found
          kubectl delete secret app-config --namespace=${{ env.RELEASE_NAME }} --ignore-not-found
          kubectl delete configmap db-init-sql-configmap --namespace=${{ env.RELEASE_NAME }} --ignore-not-found

          # db-secret with Helm ownership annotations
          kubectl create secret generic db-secret \
            --namespace=${{ env.RELEASE_NAME }} \
            --from-literal=POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --from-literal=POSTGRES_USER=${{ secrets.DB_USER }} \
            --from-literal=POSTGRES_DB=ecommerce \
            --dry-run=client -o yaml | \
          kubectl annotate --local -f - \
            meta.helm.sh/release-name=${{ env.RELEASE_NAME }} \
            meta.helm.sh/release-namespace=${{ env.RELEASE_NAME }} \
            app.kubernetes.io/managed-by=Helm \
            app.kubernetes.io/instance=${{ env.RELEASE_NAME }} \
            --overwrite -o yaml | \
          kubectl label --local -f - \
            app.kubernetes.io/managed-by=Helm \
            app.kubernetes.io/instance=${{ env.RELEASE_NAME }} \
            --overwrite -o yaml | \
          kubectl apply -f -

          # app-config secret
          kubectl create secret generic app-config \
            --namespace=${{ env.RELEASE_NAME }} \
            --from-literal=SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --from-literal=SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ecommerce \
            --from-literal=SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }} \
            --dry-run=client -o yaml | \
          kubectl annotate --local -f - \
            meta.helm.sh/release-name=${{ env.RELEASE_NAME }} \
            meta.helm.sh/release-namespace=${{ env.RELEASE_NAME }} \
            app.kubernetes.io/managed-by=Helm \
            app.kubernetes.io/instance=${{ env.RELEASE_NAME }} \
            --overwrite -o yaml | \
          kubectl label --local -f - \
            app.kubernetes.io/managed-by=Helm \
            app.kubernetes.io/instance=${{ env.RELEASE_NAME }} \
            --overwrite -o yaml | \
          kubectl apply -f -

          # db-init-sql configmap
          kubectl create configmap db-init-sql-configmap \
            --namespace=${{ env.RELEASE_NAME }} \
            --from-file=init.sql=./db/init.sql \
            --dry-run=client -o yaml | \
          kubectl annotate --local -f - \
            meta.helm.sh/release-name=${{ env.RELEASE_NAME }} \
            meta.helm.sh/release-namespace=${{ env.RELEASE_NAME }} \
            app.kubernetes.io/managed-by=Helm \
            app.kubernetes.io/instance=${{ env.RELEASE_NAME }} \
            --overwrite -o yaml | \
          kubectl label --local -f - \
            app.kubernetes.io/managed-by=Helm \
            app.kubernetes.io/instance=${{ env.RELEASE_NAME }} \
            --overwrite -o yaml | \
          kubectl apply -f -


      # Debugging: List secrets and configmaps in the namespace
      - name: Validate db-secret annotations
        run: |
          kubectl get secret db-secret --namespace=${{ env.RELEASE_NAME }} -o json | jq '.metadata.annotations'

      - name: Patch db-secret annotations if missing
        run: |
          kubectl patch secret db-secret \
            --namespace=${{ env.RELEASE_NAME }} \
            --type=json \
            -p='[
              {"op": "add", "path": "/metadata/annotations/meta.helm.sh~1release-name", "value": "${{ env.RELEASE_NAME }}"},
              {"op": "add", "path": "/metadata/annotations/meta.helm.sh~1release-namespace", "value": "${{ env.RELEASE_NAME }}"},
              {"op": "add", "path": "/metadata/annotations/app.kubernetes.io~1managed-by", "value": "Helm"},
              {"op": "add", "path": "/metadata/annotations/app.kubernetes.io~1instance", "value": "${{ env.RELEASE_NAME }}"}
            ]'

      - name: Generate values file with image tags
        run: |
          cat > ./helm/values-${{ env.ENVIRONMENT }}.yaml << EOF
          user:
            image:
              repository: kamran420/ecommerce-user
              tag: ${{ needs.build-and-publish.outputs.version }}
              
          product:
            image:
              repository: kamran420/ecommerce-product
              tag: ${{ needs.build-and-publish.outputs.version }}
              
          frontend:
            image:
              repository: kamran420/ecommerce-front
              tag: ${{ needs.build-and-publish.outputs.version }}
              
          secrets:
            appConfigName: app-config
            dbSecretName: db-secret
              
          configmaps:
            dbInitSqlConfigMapName: db-init-sql-configmap
          EOF

          if [ "${{ env.ENVIRONMENT }}" == "production" ]; then
            echo "  replicaCount: 2" >> ./helm/values-${{ env.ENVIRONMENT }}.yaml
          fi

      - name: Deploy with Helm
        run: |
          helm upgrade --install ${{ env.RELEASE_NAME }} ./helm \
            --namespace ${{ env.RELEASE_NAME }} \
            -f ./helm/values.yaml \
            -f ./helm/values-${{ env.ENVIRONMENT }}.yaml \
            --create-namespace \
            --atomic \
            --timeout 5m

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/${{ env.RELEASE_NAME }}-user --namespace ${{ env.RELEASE_NAME }} --timeout=3m
          kubectl rollout status deployment/${{ env.RELEASE_NAME }}-product --namespace ${{ env.RELEASE_NAME }} --timeout=3m
          kubectl rollout status deployment/${{ env.RELEASE_NAME }}-frontend --namespace ${{ env.RELEASE_NAME }} --timeout=3m

      - name: Delete ephemeral cluster
        if: always()
        run: |
          CLUSTER_NAME=$(cat cluster_name.txt)
          echo "Deleting ephemeral cluster: $CLUSTER_NAME"
          gcloud container clusters delete $CLUSTER_NAME --zone $ZONE --quiet
